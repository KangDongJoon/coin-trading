name: CI/CD with Docker & Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

      - name: Build with Gradle Wrapper
        run: ./gradlew build

      - name: Docker 로그인
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Docker 이미지 빌드
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/cointrading:latest .

      - name: Docker Hub에 Push
        run: docker push ${{ secrets.DOCKER_USERNAME }}/cointrading:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: EC2 서버에 배포 (SSH 접속)
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Docker Compose가 설치되어 있지 않으면 설치
            sudo apt-get update
            sudo apt-get install -y docker-compose

            # 기존 Redis 컨테이너가 있을 경우 삭제
            docker rm -f redis-container || true

            # CoinTrading 최신 이미지 풀
            docker pull ${{ secrets.DOCKER_USERNAME }}/cointrading:latest

            # Redis와 CoinTrading을 관리할 Docker Compose 파일 생성
            cat <<EOF > docker-compose.yml
            version: '3.8'
            services:
              redis:
                image: redis:latest
                container_name: redis-container
                ports:
                  - "6379:6379"
                volumes:
                  - redis-data:/data
                networks:
                  - app-network
                restart: always
              cointrading:
                image: ${{ secrets.DOCKER_USERNAME }}/cointrading:latest
                container_name: cointrading
                ports:
                  - "8080:8080"
                environment:
                  - AES_SECRET_KEY=${{ secrets.AES_SECRET_KEY }}
                  - SPRING_REDIS_HOST=redis
                depends_on:
                  - redis
                networks:
                  - app-network
                restart: always
            volumes:
              redis-data:
            networks:
              app-network:
                driver: bridge
            EOF

            # Docker Compose로 두 서비스를 시작
            docker-compose up -d