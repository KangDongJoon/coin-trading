name: CI/CD with Docker & Gradle

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  DOCKER_IMAGE: ${{ secrets.DOCKER_USERNAME }}/cointrading:latest
  EC2_USER: ubuntu
  EC2_HOST: ${{ secrets.EC2_HOST }}
  DB_USERNAME: ${{ secrets.DB_USERNAME }}
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
  AES_SECRET_KEY: ${{ secrets.AES_SECRET_KEY }}
  JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
  ROOT_PASSWORD: ${{ secrets.ROOT_PASSWORD }}
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Build project
        run: ./gradlew build

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker image
        run: |
          docker build -t $DOCKER_IMAGE .
          docker push $DOCKER_IMAGE

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - uses: actions/checkout@v4
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Copy docker-compose.yml
        run: scp -o StrictHostKeyChecking=no docker-compose.yml $EC2_USER@$EC2_HOST:/home/ubuntu/

      - name: Deploy with Docker Compose
        run: |
          ssh -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST << EOF
            set -e
            cd /home/ubuntu

            # .env 파일 생성
            cat > .env <<EOT
            REDIS_HOST=redis
            DB_URL=jdbc:mysql://mysql:3306/cointrading
            DB_USERNAME=${DB_USERNAME}
            DB_PASSWORD=${DB_PASSWORD}
            AES_SECRET_KEY=${AES_SECRET_KEY}
            JWT_SECRET_KEY=${JWT_SECRET_KEY}
            ROOT_PASSWORD=${ROOT_PASSWORD}
            DOCKER_USERNAME=${DOCKER_USERNAME}
            REDIS_PASSWORD=${REDIS_PASSWORD}
            EOT

            # 최신 이미지 가져오기
            docker compose pull

            # 컨테이너 재시작
            docker compose up -d --remove-orphans
          EOF
