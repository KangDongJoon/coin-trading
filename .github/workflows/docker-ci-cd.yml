name: CI/CD with Docker & Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

      - name: Build with Gradle Wrapper
        run: ./gradlew build

      - name: Docker 로그인
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Docker 이미지 빌드
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/cointrading:latest .

      - name: Docker Hub에 Push
        run: docker push ${{ secrets.DOCKER_USERNAME }}/cointrading:latest

      - name: Set up SSH Key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > private_key.pem
          chmod 600 private_key.pem

      - name: Transfer docker-compose.yml to EC2
        run: |
          scp -i private_key.pem -o StrictHostKeyChecking=no docker-compose.yml ubuntu@${{ secrets.EC2_HOST }}:/home/ubuntu/


  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: EC2 서버에 배포 (SSH 접속)
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Docker Compose가 설치되어 있는지 확인
            if ! docker compose version &> /dev/null && ! docker-compose version &> /dev/null; then
              echo "Docker Compose could not be found, installing..."
              sudo apt-get update
              sudo apt-get install -y docker-compose-plugin
              sudo ln -s /usr/libexec/docker/cli-plugins/docker-compose /usr/local/bin/docker-compose || true
            else
              echo "Docker Compose is already installed"
            fi

            # 환경 변수 파일 생성 (.env)
            echo "REDIS_HOST=redis" > ~/.env
            echo "DB_URL=jdbc:mysql://mysql:3306/cointrading" >> .env
            echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
            echo "AES_SECRET_KEY=${{ secrets.AES_SECRET_KEY }}" >> .env
            echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> .env
            echo "ROOT_PASSWORD=${{ secrets.ROOT_PASSWORD }}" >> .env
            echo "DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}" >> .env
            echo "REDIS_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env

            # 최신 Docker 이미지 풀
            docker stop cointrading || true
            docker rm -f cointrading || true
            docker rmi -f ${{ secrets.DOCKER_USERNAME }}/cointrading:latest || true
            docker pull ${{ secrets.DOCKER_USERNAME }}/cointrading:latest

            # Docker Compose 실행 (자동으로 .env 파일 로드)
            docker-compose down
            docker-compose up -d
            
            rm -f ~/.env
